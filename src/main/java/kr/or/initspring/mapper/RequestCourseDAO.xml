<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.initspring.dao.RequestCourseDAO">
	<select id="getOpenedLectureList" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select s.subject_code, o.semester_code, o.registed_seat, s.professor_code, s.subject_name, 
		s.subject_credit,s.grade_limit, s.subject_state, s.subject_seats, s.subject_type
		from opened o join subject s
		on o.subject_code = s.SUBJECT_CODE
	</select>
	
	<select id="getPeriodBySubjectCode" resultType="kr.or.initspring.dto.commons.PeriodDTO">
		select p.period_code, p.PERIOD_DAY, p.PERIOD_START, p.PERIOD_END
		from (select * from lecture where subject_code=#{subject_code}) l join period p
		on l.period_code = p.PERIOD_CODE
	</select>
	
	<select id="getProfessorNameByPfCode" resultType="String">
		select m.member_name
		from (select * from professor where professor_code = #{professor_name}) p join member m
		on p.member_id = m.member_id
	</select>
	
	<select id="getLecturePlanBySubjectCode" resultType="String">
		select subject_filesrc from plan where SUBJECT_CODE = #{subject_code}
	</select>
	
	<select id="getRequiredChoice" resultType="int">
		select required_choice from
		<if test="param2==0">
			major where subject_code = #{param1}
		</if>
		<if test="param2==1">
			liberal where subject_code = #{param1}
		</if>
	</select>
	
	<select id="getCollegeList" resultType="kr.or.initspring.dto.commons.CollegeDTO">
		select * from college
	</select>
	
	<select id="getDepartmentList" parameterType="String" resultType="kr.or.initspring.dto.commons.DepartmentDTO">
		select * from department
		<where>
			<if test="value != null and value != ''">
				college_code = #{value}
			</if>
		</where>
	</select>
	
	<select id="getOpenedLectureListByKeyword" parameterType="hashmap" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		<choose>
			<when test="department_code.equals('1000')">
				select s.subject_code, o.semester_code, o.registed_seat, s.professor_code, s.subject_name, 
				s.subject_credit,s.grade_limit, s.subject_state, s.subject_seats, s.subject_type
				from opened o join subject s
				on o.subject_code = s.SUBJECT_CODE
			</when>
			<when test="department_code.equals('100')">
				select l.SUBJECT_CODE, l.REQUIRED_CHOICE, s.PROFESSOR_CODE, s.SUBJECT_NAME, 
				s.SUBJECT_CREDIT, s.GRADE_LIMIT,s.SUBJECT_STATE,s.SUBJECT_SEATS,s.SUBJECT_TYPE
				from liberal l join subject s
				on l.subject_code = s.subject_code
			</when>
			<otherwise>
				select *
				from (select * from major where department_code=#{department_code}) m join subject s
				on m.subject_code = s.subject_code
				where s.subject_state=2
			</otherwise>
		</choose>
	</select>

	<select id="searchOpLectureOrderbySubjectName" parameterType="hashmap" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		<choose>
			<when test="department_code.equals('1000')">
				select *
				from opened o join subject s
				on o.subject_code = s.SUBJECT_CODE
				order by s.subject_name ${order_by}
			</when>
			<when test="department_code.equals('100')">
				select *
				from liberal l join subject s
				on l.subject_code = s.subject_code
				order by s.subject_name ${order_by}
			</when>
			<otherwise>
				select *
				from (select * from major where department_code=#{department_code}) m join subject s
				on m.subject_code = s.subject_code
				where s.subject_state=2
				order by s.subject_name ${order_by}
			</otherwise>
		</choose>
	</select>

	<select id="searchOpLectureOrderbyProfessorName" parameterType="hashmap" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		<choose>
			<when test="department_code.equals('1000')">
				select* from
				(select k.subject_code, k.registed_seat, k.subject_credit, k.subject_name, k.grade_limit, k.subject_state, k.subject_seats , k.subject_type, k.professor_code, p.member_id from
				(select o.subject_code, o.registed_seat, s.subject_credit, s.subject_name, s.grade_limit, s.subject_state, s.subject_seats , s.subject_type, s.professor_code from opened o join subject s on o.subject_code = s.SUBJECT_CODE) k join professor p on k.professor_code = p.PROFESSOR_CODE) i
				join member m on i.member_id = m.member_id order by m.member_name ${order_by}
			</when>
			<when test="department_code.equals('100')">
				select* from
				(select k.subject_code, k.subject_credit, k.subject_name, k.grade_limit, k.subject_state, k.subject_seats , k.subject_type, k.professor_code, p.member_id from
				(select o.subject_code, s.subject_credit, s.subject_name, s.grade_limit, s.subject_state, s.subject_seats , s.subject_type, s.professor_code from liberal o join subject s on o.subject_code = s.SUBJECT_CODE) k join professor p on k.professor_code = p.PROFESSOR_CODE) i
				join member m on i.member_id = m.member_id order by m.member_name ${order_by}
			</when>
			<otherwise>
				select m.member_name, t.professor_code, t.subject_name, t.subject_credit, t.subject_state, t.subject_seats, t.subject_type, t.grade_limit , t.subject_code
				from(select k.professor_code, k.subject_name, k.subject_credit, k.subject_state, k.subject_seats, k.subject_type, k.grade_limit, p.member_id, k.subject_code
				from (select s.subject_code, s.subject_name, s.subject_credit, s.subject_state, s.subject_seats, s.subject_type, s.professor_code, s.grade_limit from (select * from major where department_code=#{department_code}) m join subject s on m.subject_code = s.subject_code where s.subject_state=2) k join professor p
				on k.professor_code = p.professor_code) t join member m on t.member_id = m.member_id
				order by m.member_name ${order_by}
			</otherwise>
		</choose>
	</select>


	<update id="setErollStatus" parameterType="hashmap">
		update enroll_status set enroll_active=#{enroll_active} where enroll_grade=#{enroll_grade} and enroll_type=#{enroll_type}
	</update>
	
	<select id="getEnrollActive" parameterType="int" resultType="int">
		select enroll_active from enroll_status where enroll_grade=#{param1} and enroll_type=#{param2}
	</select>
	
	<select id="getStStateByMemberId" resultType="kr.or.initspring.dto.commons.StStateDTO">
		select * 
		from (select * from student where member_id = #{memberid}) s join st_state t
		on s.student_code = t.student_code
	</select>
	
	<select id="getSubjectListByKeyword" parameterType="hashmap" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select s.subject_code, o.semester_code, o.registed_seat, s.professor_code, s.subject_name, 
		s.subject_credit,s.grade_limit, s.subject_state, s.subject_seats, s.subject_type
		from opened o join subject s
		on o.subject_code = s.SUBJECT_CODE
		<where>
			<choose>
				<when test="searchType.equals('subject_name')">
					s.subject_name like '%'||#{keyword}||'%'
				</when>
				<otherwise>
					s.subject_code = #{keyword}
				</otherwise>
			</choose>
		</where>
	</select>
	
	<select id="getOpSubjectInfoBySubjectCode" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select s.subject_code, o.semester_code, o.registed_seat, s.professor_code, s.subject_name, 
		s.subject_credit,s.grade_limit, s.subject_state, s.subject_seats, s.subject_type
		from opened o join subject s
		on o.subject_code = s.SUBJECT_CODE
		where s.subject_code = #{subject_code}
	</select>

	<select id="getClassroomCodeBySubjectCode" resultType="kr.or.initspring.dto.requestCourse.CustomClassRoomDTO">
		select distinct classroom_code from lecture where subject_code=#{subject_code}
	</select>
	
	<select id="getClassroomInfoByClassroomCode" resultType="kr.or.initspring.dto.requestCourse.CustomClassRoomDTO">
		select * from classroom where classroom_code = #{classroom_code}
	</select>
	
	<select id="getPeriodByClassroomCode" resultType="kr.or.initspring.dto.commons.PeriodDTO">
		select p.PERIOD_CODE, p.PERIOD_DAY, p.PERIOD_END, p.PERIOD_START
		from lecture l join period p
		on l.period_code = p.period_code
		where l.classroom_code = #{classroom_code}
	</select>
	
	<select id="getStudentByMemberid" resultType="kr.or.initspring.dto.commons.StudentDTO">
		select * from student where member_id = #{member_id}
	</select>
	
	<select id="getStstateByStudentCode" resultType="kr.or.initspring.dto.commons.StStateDTO">
		select * from st_state where student_code = #{student_code}
	</select>
	
	<select id="getSubjectBySubjectCode" resultType="kr.or.initspring.dto.commons.SubjectDTO">
		select * from subject where subject_code = #{subject_code}
	</select>
	
	<select id="getBeforeSubjectBySubjectCode" resultType="kr.or.initspring.dto.commons.BeforeSubjectDTO">
		select * from before_subject where subject_code = #{subject_code}
	</select>
	
	<select id="checkBeforeSubjectByRecord" resultType="int">
		select count(*) from record where student_code = #{param1} and subject_code = #{param2}
	</select>
	
	<update id="updateTimetableShare" parameterType="kr.or.initspring.dto.commons.StudentDTO">
		update student set timetable_share = #{timetable_share} where member_id = #{member_id}
	</update>
	
	<select id="getTimetableShareByMemberid" resultType="int">
		select timetable_share from student where member_id = #{member_id}
	</select>
	
	<delete id="deleteReserveByStudentCode">
		delete from reserve where student_code = #{student_code}
	</delete>
	
	<insert id="insertReserve" parameterType="hashmap">
		insert into reserve(student_code, subject_code) values (#{student_code},#{subject_code})
	</insert>
	
	<select id="getSubjectCredit" resultType="int">
		select subject_credit from subject where subject_code = #{subject_code}
	</select>
	
	<select id="getPreTimetableByStudentCode" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select * from
		reserve r join subject s
		on r.subject_code = s.subject_code
		where r.student_code = #{student_code}
	</select>

	<update id="plusRegistedSeatBySubjectCode">
		update opened set registed_seat = registed_seat + 1 where subject_code = #{subject_code}
	</update>
	
	<update id="minusRegistedSeatBySubjectCode">
		update opened set registed_seat = registed_seat - 1 where subject_code = #{subject_code}
	</update>
	
	<select id="getRetakeCheck" resultType="int">
		select count(*) from record where student_code = #{param1} and subject_code = #{param2}
	</select>
	
	<select id="checkStudentCode" resultType="int">
		select count(*) from student where student_code = #{student_code}	
	</select>
	
	<select id="checkOthersShareByStudentCode" resultType="int">
		select timetable_share from student where student_code = #{student_code}
	</select>
	
	<select id="getStudentByStudentCode" resultType="kr.or.initspring.dto.commons.StudentDTO">
		select * from student where student_code = #{student_code}
	</select>
	
	<select id="getPeriodList" resultType="kr.or.initspring.dto.commons.PeriodDTO">
		select * from period
	</select>
	
	<select id="getReserveList" resultType="kr.or.initspring.dto.commons.ReserveDTO">
		select * from reserve
	</select>
	
	<select id="countRequestSeat" resultType="int">
		select count(*) from reserve where subject_code = #{subject_code}
	</select>
	
	<select id="setReserveCheck" parameterType="hashmap">
		update reserve set reserve_check = #{result} where subject_code = #{subject_code} and student_code = #{student_code}
	</select>
	
	<update id="updateRequestSeat">
		update opened set registed_seat = #{param1} where subject_code = #{param2}
	</update>
	
	<select id="getFailedListByStudentCode" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select * from
		reserve r join subject s
		on r.subject_code = s.subject_code
		where r.student_code = #{student_code} and r.reserve_check=1
	</select>
	
	<select id="getRegistedSeat" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select *
		from opened o join subject s
		on o.subject_code = s.subject_code
		where o.subject_code= #{subject_code}
	</select>
	
	<update id="updateRegistedSeat">
		update opened set registed_seat = registed_seat + 1 where subject_code = #{subject_code}
	</update>
	
	<select id="checkAlreadyExistSubject" resultType="int">
		select count(*) from reserve where subject_code=#{param1} and student_code=#{param2} and reserve_check=1
	</select>
	
	<insert id="copyFromReserveToEnrollment">
		insert into enrollment select student_code, subject_code from reserve where reserve_check=0
	</insert>
	
	<select id="getTableFromEnrollment" resultType="kr.or.initspring.dto.requestCourse.OpenedLectureDTO">
		select * from
		enrollment e join subject s
		on e.subject_code = s.subject_code
		where e.student_code = #{student_code}
	</select>
	
	<insert id="insertEnrollment" parameterType="hashmap">
		insert into enrollment values(#{student_code},#{subject_code})
	</insert>
	
	<delete id="deleteFromEnrollment">
		delete from enrollment where student_code = #{param1} and subject_code = #{param2}
	</delete>
	
	<select id="getReserveSeatsBySubjectCode" resultType="int">
		select count(*) from reserve where subject_code=#{subject_code}	
	</select>
</mapper>