<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.initspring.dao.LectureMgDAO">
	<select id="select_list" resultType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		
    select s.subject_code, nvl(o.success_check,3) as success_check,s.GRADE_LIMIT,s.subject_name,s.subject_type 
    from SUBJECT s LEFT OUTER join OP_REQUEST o 
    on s.subject_code = o.subject_code where s.professor_code = #{param1}
	
	</select>
	
	<select id="select_major" resultType="String">
		select required_choice from MAJOR where subject_code = #{param1}
	</select>
	
	<select id="select_liberal" resultType="String">
		select required_choice from LIBERAL where subject_code = #{param1}  
	</select>
	

	<select id="select_Professor" parameterType="String" resultType="String">
		select professor_code from professor where member_id=#{param1}
	</select>
	
	<!-- 중복없는 선수과목리스트 -->
	<select id="select_distinct_before">
		SELECT DISTINCT(SUBJECT_NAME) FROM SUBJECT;
	</select>

	<!-- 선수강과목 등록 이것은 중복된 이름 처리가능함 -->
	<select id="">
		SELECT SUBJECT_CODE FROM SUBJECT where SUBJECT_NAME='#{subject_name}';
	</select>
	
	
	<!-- 과목등록할때 선수과목 불러옴 -->
	<select id="select_Before" parameterType="String" resultType="String">
	SELECT DISTINCT(sub.subject_name) FROM MAJOR m join SUBJECT sub on m.SUBJECT_CODE = sub.SUBJECT_CODE 
	WHERE m.DEPARTMENT_CODE = #{param1}
	</select>
	
	<select id="select_departmentcode" resultType="kr.or.initspring.dto.commons.PfMajorDTO">
	SELECT m.PROFESSOR_CODE,m.DEPARTMENT_CODE FROM PROFESSOR p join PF_MAJOR m			
	on p.PROFESSOR_CODE = m.PROFESSOR_CODE WHERE MEMBER_ID = #{param1}
	</select>

	
	<insert id="insert_Subject" parameterType="kr.or.initspring.dto.commons.SubjectDTO">
	 	insert into SUBJECT(subject_code,professor_code,subject_name,subject_credit,grade_limit,
	 	subject_state,subject_seats,subject_type) values (#{subject_code},#{professor_code},#{subject_name},
	 	#{subject_credit},#{grade_limit},0,#{subject_seats},#{subject_type})
	</insert>
	
	<insert id="insert_op" parameterType="String">
		insert into OP_REQUEST (subject_code,semester_code,success_check) values (#{param1},#{param2},0)
	</insert>
	
	<insert id="insert_BeforeName" parameterType="String">
		insert into BEFORE_SUBJECT (subject_code,before_name) values (#{param1},
		(select subject_name from SUBJECT where subject_name = #{param2}))
	</insert>
	
	<insert id="insert_Liberal" parameterType="String">
	 	insert into LIBERAL (subject_code,required_choice) values (#{param1},#{param2})
	</insert>
	
	<insert id="insert_major" parameterType="String">
	 	insert into MAJOR (subject_code,required_choice,department_code) values (#{param1},#{param2},#{param3})
	</insert>
	
	
	<!-- 여기서부터디테일 -->
	<select id="subject_Detail" parameterType="String" resultType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		select * from subject s left outer join before_subject b on s.subject_code = b.subject_code
        where s.subject_code = #{param1}
	</select>
	
	<select id="detail_liberal" resultType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		select * from subject s left outer join before_subject b on s.subject_code = b.subject_code
        join liberal l on s.subject_code = l.subject_code where s.subject_code = #{param1}		
	</select>
		
	<select id="detail_major" resultType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		select * from subject s left outer join before_subject b on s.subject_code = b.subject_code
        join major m on s.subject_code = m.subject_code where s.subject_code = #{param1}	
	</select>
	
	<!-- 비포코드로 그 비포코드에 맞는 과목명 가져옴 -->
	<select id="detail_beforename" resultType="String">
		select subject_name from subject where subject_code = #{param1}
	</select>
	
	
	<delete id="delete_Subject" parameterType="String">
		delete from SUBJECT where subject_name = #{param1}
	</delete>
	
	<update id="update_Subject" parameterType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		update SUBJECT set subject_type=#{subject_type},subject_name=#{subject_name},subject_credit=#{subject_credit}
		,subject_seats=#{subject_code} where subject_code=#{subject_code}
  
	</update>
	
	<!-- 선수과목을 수정하는 쿼리 -->
	<update id="update_before_subject">
		update BEFORE_SUBJECT set before_code=#{before_code} where subject_code = #{subject_code}
	</update>
	
	<!-- 이거는 이미 들어가있는 건물,시간표 조회 -->
	<select id="select_period_build" resultType="kr.or.initspring.dto.lectureMg.CustomLectureMgDTO">
		select * from ASK_TIME a join subject s on a.subject_code = s.subject_code where subject_code = #{param1}
	</select>
	
	
	
</mapper>